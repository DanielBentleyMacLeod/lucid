
/*
This is a first draft of a stateful firewall example. From 6/18/20

Discussion notes (6/18/20)

Interfacing with the P4 program: 
- continue is a builtin event, like packet_in. 

The type checker should allow you to generate a continue event, but not
write a handler for it. 

The interface between P4 and DPT, for now, should be: 
packet_in : you can write a handler for packet_in, but not generate it.
continue  : you can generate continue, but not packet_in.
- The DPT executes before the P4 

1. extend packet_in, so it has a src, dst, and inport.
2. make it possible for an event handler to generate a continue event, which also has those three fields. 
3. add a feature that allows us to concatenate integer fields and make a bigger (wider) one out of it. 

You can have more advanced, custom interfaces. 

Controller sets: 
// From our perspective, the "controller set" is a data structure with certain operations. 
// The operations are the things that the data plane can do (e.g., lookup but not install).

Array functions necessary to implement a basic cuckoo hash table: 
	 - get(idx): get the value at idx.
	 - getAndSet(idx, value): get the value at idx, then set it to the new value.

*/

controller_set<int<8>> localPorts[256]; // Controller is a modifier.

// Process a packet that arrived on a certain port. Make a decision about how to handle it. 
handler packet_in(inPort, src, dst) {

	if (inPort > 32) { // with controller-object syntax: localPorts.contains(foo, inPort);
		int<64> key = (dst^src);
		int<1> found;
		int<10> valIdx;
		found, valIdx = lookup(key);
		// If not found, insert.
		if (found != 1) {
			int<1> success = start_insert(key);
			if (success == 0) {
				report (key); // Report failure to controller.
			}
			// Forward this packet to the rest of the P4 program. 
			generate continue(inPort, src, dst);
		}
	}
	else {
		int<64> key = (src^dst);
		int<1> found;
		int<10> valIdx;
		found, valIdx = lookup(key);
		if (found){
			// Forward this packet to the rest of the P4 program. 
			generate continue((inPort, src, dst));
		}
		else {
			// Do not generate continue, the packet should be dropped. 
		}
	}		
}

// NEW: lambda array declarations that specify length (1024) and width (64 bits).
// A key is a (src, dst) pair. 
LambdaArray<int<64>> keys1[512]; 
LambdaArray<int<64>> keys2[512]; 

 // Store a (key, index) pair that is being relocated.
LambdaArray<int<64>>  keyStash[1]; 
LambdaArray<int<10>>  idxStash[1]; 

// A value is a single bit that indicates the flow is authorized. 
LambdaArray<int<1>> values[1024]; 

lambdaArray<int<1>> pendingInsert[1];


// Seeds for hash function. 
int<64> seed1 = 7;
int<64> seed2 = 13;
function calculateHashes(key : int<64>) : (int<16>, int<16>){
	int<16> h1 = hash(key, seed1, 9);
	int<16> h1 = hash(key, seed2, 9);
	return h1, h1;
}

// Return whether or not a value was found and the index at which its stored. 
// New: functions that return tuples of locals.
function lookup(key : int<64>) : (int<1>, int<16>) {
	int<16> h1, h2 = calcHashes(key);
	storedKey1 = keys1.get(h1);
	storedKey2 = keys2.get(h2);
	storedKey3 = keyStash.get(1);
	int<16> valueIdx = 0;
	int<1>    found = 0;
	if (key == storedKey1) {
		valueIdx = keyIdx1;		
		found = 1;
	}
	else if (key == storedKey2) {
		valueIdx = 512 + keyIdx2;
		found = 1;
	}
	else if (key == storedKey3){
		valueIdx = idxStash.get(0);
		found = 1;
	}
	return (found, valueIdx);
}


function start_insert(key : int<64>) : (int<1>) {
	// check if there is currently a pending insert. Set pending insert[0] to 1.
	int<1> pending_insert = pendingInsert.getAndSet(0, 1);
	if (pending_insert == 1) {
		return 0; // Cannot install flow -- insert "queue" full. 
	}		
	else {
		// Insert a key that we know is not in the hash table. 
		generate insert(key, key, 0);
		return success;
	}
}

// This is a recursive event that tries to move at most 10 
// current items in the hash table before giving up. 
int<16> MAX_MOVE_CT = 10;
handler insert(key : int<64>, original_key : int<64>, move_ct : int<16>) {	
	if (move_ct < MAX_MOVE_CT) {
		// insert into array 1, evict current occupant.
		int<1> finished = 0;
		int<16> h1 = hash(key, seed1, 9);
		int<64> evictedKey1 = storedKey1.getAndSet(h1, key);
		if (evictedKey1 == NULL){
			finished = 1;
		}
		else {
			// insert into array 2, evict current occupant. 
			int<16> h2 = hash(evictedKey1, seed2, 9);
			int<64> evictedKey2 = storedKey2.getAndSet(h2, evictedKey1);
			// If we evicted someone, we need to generate another insert_with_move.
			if (evictedKey2 == NULL){
				finished = 1;
			}

			else {
				// stash the key and index we're about to move. 
				keyStash.set(0, evictedKey2);
				valueStash.set(0, 512+h2);
				generate insert(evictedKey2, original_key, move_ct + 1);
			}
		}
		// If we're finished with the move, change pendingInsert to 0.
		// (might also need to clear the stash?)
		if (finished == 1){
			pendingInsert.set(0);
		}
	}
	else {
		// if we have exceeded move_ct, we need to undo all the moves by 
		// deleting original_key and calling insert on the most recent key that we tried to install. 
		// This could also be handled in other ways. 
	}
}

// NOTE: Should hashing be a builtin? Should this be polymorphic in outWidth?
function hash(key, prime, outWidth) {
	// This is a surprisingly simple universal hash function defined in 
	// "High Speed Hashing for Integers and Strings": https://arxiv.org/abs/1504.06804
	int<16> hashVal = (prime * key) >> (64 - outWidth);
	return hashVal;
}