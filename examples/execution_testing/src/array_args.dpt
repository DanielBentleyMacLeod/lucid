/* Using arrays as arguments to a function. */

entry event ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos);
event loop (int<<9>> port);
exit event ip_out (int<<1>> drop, int<<9>> egr_port);


global Array.t<<32>> counters = Array.create(1024);
memop incr(int memval, int incrval) {
    return memval + incrval;
}

handle ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos) {
    generate loop(igr_port);
}

fun bool incr_and_check(Array.t<<32>> arr, int idx, int threshold) {
    int count = Array.update(arr, idx, incr, 1, incr, 1);
    if (count == threshold){
      return true;
    } else {
      return false;
    }
}

handle loop(int<<9>> port){    
    // increment counter and get new value. 
  bool is_ten = incr_and_check(counters, 0, 10);
  if (is_ten == true) {
    generate ip_out(0, port);
  } else {
    generate loop(port);    
  }
}