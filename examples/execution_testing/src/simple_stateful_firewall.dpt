/* A simple stateful firewall that 
   doesn't handle collisions or timeouts.  */

const int seed = 7;
const int NULL = 0;
const int TRUE = 1; 
const int FALSE = 0;
const int<<8>> TOS_TRUSTED = 1;

entry event ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos);
exit event ip_out (int<<1>> drop, int<<9>> egr_port);


global Array.t<<32>> key_src = Array.create(1024);
global Array.t<<32>> key_dst = Array.create(1024);


memop incr(int memval, int incrval) {
    return memval + incrval;
}
memop always_mem(int memval, int newval) {
    return memval;
}
memop mem_eq_search(int memval, int searchval){
    if (memval == searchval){
        return TRUE;
    } else {
        return FALSE;
    }
} 
memop new_if_null(int memval, int newval){
    if (memval == NULL){
        return newval;
    } else {
        return memval;
    }
}
// if memval is null or searchval, return null.
// otherwise, return memval. 
// memval == null -> null
// memval == searchval --> null
// (memval != null) && (memval != searchval) --> memval
memop null_if_eq(int memval, int searchval){
    if (memval == searchval) {
        return NULL;
    } else {
        return memval;
    }
}

handle ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos) {    
    // case: flow from trusted source.
    if (tos == TOS_TRUSTED) {
        int<<10>> idx = hash<<10>>(seed, src, dst);
        // put this flow's key in the table if the slot is empty, return the previous value. 
        int previous_src = Array.update(key_src, idx, null_if_eq, src, new_if_null, src);
        int previous_dst = Array.update(key_dst, idx, null_if_eq, dst, new_if_null, dst);
        // if the previous record was null or the flow's key, this flow is stored 
        // and we can safely emit the packet. 
        if ((previous_src == NULL) && (previous_dst == NULL)) {
            generate ip_out(0, igr_port);
        } 
    // case: flow from untrusted source. This is only allowed 
    // if the reverse direction flow has been seen. 
    } else {
        int<<10>> idx = hash<<10>>(seed, dst, src);
        int src_match = Array.update(key_src, idx, mem_eq_search, dst, always_mem, 0);
        int dst_match = Array.update(key_dst, idx, mem_eq_search, src, always_mem, NULL);
        if ((src_match == TRUE) && (dst_match == TRUE)) {
            generate ip_out(0, igr_port);
        }
    }
}