/*
    A simple stateful firewall with a cuckoo insertion thread.
    [8/6/20]
    The resulting P4 must be compiled with the compiler flag: 
        --table-placement-in-order
        or metadata initialization will fail and there won't be enough stages
    There are some todos:
        - Array.cmp
        - An insert queue
*/

Array src_1 = Array.create<32>(1024, 1);
Array dst_1 = Array.create<32>(1024, 1);

Array ts_1  = Array.create<32>(1024, 3);

Array src_2 = Array.create<32>(1024, 4);
Array dst_2 = Array.create<32>(1024, 4);

Array ts_2  = Array.create<32>(1024, 5);

Array src_stash = Array.create<32>(1, 8);
Array dst_stash = Array.create<32>(1, 8);

handle insert (int src, int dst, int ts, int first_src, int first_dst, int<8> retry_ct) {
/* stage 0 */
    int abort = 0;
    int ts_local = ts;
    int h1 = Sys.hash<32>(10398247, src, dst);
    int h2 = Sys.hash<32>(1295981879, src, dst);
/* stage 1 */
    /* insert and evict to table 1 */
    int src_victim = Array.getAndset<32>(src_1, h1, src);
    int dst_victim = Array.getAndset<32>(dst_1, h1, dst);

/* stage 3 [INSERT] */
    int ts_victim  = Array.getAndset<32>(ts_1, h1, ts_local);

    /* if there was a collision, insert and evict to table 2 */
    if (src_victim == 0 && dst_victim == 0) { /* (placeholder for OR of NEQs) (test that something was evicted) */
/* stage 4 */
        int src_victim_2 = Array.getAndset<32>(src_2, h2, src_victim);
        int dst_victim_2 = Array.getAndset<32>(dst_2, h2, dst_victim);        
/* stage 5 [INSERT] */        
        int ts_victim_2  = Array.getAndset<32>(ts_2, h2, ts_victim);
        /* if victim_2_key == first_insert_key */        
        int src_diff = src_victim_2 - first_src;
        int dst_diff = dst_victim_2 - first_dst;        
/* stage 6 */        
        /* there's a cycle -- abort. */
        if (src_diff == 0 && dst_diff == 0 && retry_ct == 2){
/* stage 7 */
            abort = 1;
            src_victim_2 = 0; /* so the stash gets cleared */
            dst_victim_2 = 0; 
        }
        /* no cycle, possibly re-insert. */
        else {
/* stage 7 */
            retry_ct = retry_ct + 1;
        }
/* stage 8 */
        int junk3 = Array.set<32>(src_stash, 0, src_victim_2);
        int junk4 = Array.set<32>(dst_stash, 0, dst_victim_2);

        if (src_victim_2 == 0 && dst_victim_2 == 0) { /* (placeholder for or of NEQs) (test that something was evicted) */
/* stage 9 */
            if (abort == 0) {
/* stage 10 */                
                generate insert (src_victim_2, dst_victim_2, ts_victim_2, first_src, first_dst, retry_ct);
            }
        }
    }    
}

/*handle insert (int src, int dst, int ts, int first_src, int first_dst, int<8> retry_ct) {*/
    /* if there's a cycle, stop trying to insert... */
/* } */

handle packetin (int src, int dst) {
/* stage 0 */
    int h1 = Sys.hash<32>(10398247, src, dst); 
    int h2 = Sys.hash<32>(1295981879, src, dst);
    int src_cpy = 1; /* placeholder for bug in dpt compiler that would merge names wrong if we passed src to getCondset(src_stash) */
    int dst_cpy = 2;
    int cur_ts = Sys.time(1);
    int cur_ts_2 = Sys.time(1);
    
/* stage 1 */
    int src_stored_1 = Array.get<32>(src_1, h1);
    int dst_stored_1 = Array.get<32>(dst_1, h1);

    /* found in first table */
/* stage 2 */
    if (src_stored_1==1 && dst_stored_1==1) {
/* stage 3 */
        int junk1 = Array.set<32>(ts_1, h1, cur_ts);
        generate continue(src, dst);
    }
    else {
/* stage 4 */
        int src_stored_2 = Array.get<32>(src_2, h2);
        int dst_stored_2 = Array.get<32>(dst_2, h2); 
        /* found in 2nd table */
        if (src_stored_2==1 && dst_stored_2==1) {
/* stage 5 */            
            int junk2 = Array.set<32>(ts_2, h2, cur_ts_2);
            generate continue(src, dst);
        }
        /* not found in either table */
        else {
/* stage 5 */            
            /* check stash for forward direction of flow */
            if (src == 10) { /* this should be a P4-native controller-managed table */
/* stage 8 [INSERT] was: stage 6 */            
                int stashed_src = Array.getCondset<32>(src_stash, 0, src_cpy, ==, 0);
                int stashed_dst = Array.getCondset<32>(dst_stash, 0, dst_cpy, ==, 0);
/* stage 9 */            
                int stashed_src_eq = src - stashed_src;
                int stashed_dst_eq = dst - stashed_dst;
                /* stash is empty: insert and continue. */
                if (stashed_src == 0 && stashed_dst == 0) {
/* stage 10 */                
                    generate continue (src, dst);
                    generate insert (src, dst, cur_ts, src, dst, 0);
                }
                else {
/* stage 10 */   
                    /* found in stash */
                    if (stashed_src_eq == 0 && stashed_dst_eq == 0) {
/* stage 11 */                    
                        generate continue (src, dst);                    
                    }
                }
            }
            /* reverse direction stash check */
            else {
/* stage 8 [INSERT] was: stage 6 */                
                int src_stored_stash = Array.get<32>(src_stash, 0);
                int dst_stored_stash = Array.get<32>(dst_stash, 0);
/* stage 9 */                 
                /* stored, safe to continue */
                if (src_stored_stash == 0 && dst_stored_stash == 0) {
/* stage 10 */                 
                    generate continue(src, dst);
                }
            }
        }
    }
}