(* 
Testing a stateful program with branches. 
*)

Array key_1 = Array.create(1024);
Array ts_1  = Array.create(1024);

Array key_2 = Array.create(1024);
Array ts_2  = Array.create(1024);

Array key_stash = Array.create(1);
Array ts_stash  = Array.create(1);


handle packetin (int src, int dst) {
	int key_stored_1 = Array.get(key_1, dst);
	if (key_stored_1 == 1) {        
		int junk1 = Array.set(ts_1, src, src);
	}
	int key_stored_2 = Array.get(key_2, dst); 
	if (key_stored_2 == 1) { 
		int junk2 = Array.set(ts_2, dst, src);
	}
	if (src == 0) {
		if (key_stored_2 == 1) {
			generate continue(src, dst);
		}
		else {
			int stashed_key = Array.getCondset(key_stash, 0, dst, ==, 0);
			int stashed_ts  = Array.getCondset(ts_stash, 0, src, ==, 0 );
			if (stashed_key == 0) {
				generate insert(stashed_key, dst, 0);
				generate continue(src, dst);
			}
		}
	}
	else { 
		if (key_stored_1 == 1) {
			generate continue(src, dst);
		}                    
	}
}

handle insert (int val1, int val2, int val3) {
	int key_victim_1 = Array.getAndset(key_1, val1, val2);
	int ts_victim_1  = Array.getAndset(ts_1, val1, val3);
	if (key_victim_1 != 0) {
		int key_victim_2 = Array.getAndset(key_2, val1, key_victim_1);
			int ts_victim_2  = Array.getAndset(ts_2, val1, ts_victim_1);
		(* if (key_victim_2 != 0) { *)
			(* int key_stash_victim = Array.getAndset(key_stash, 0, key_victim_2); *)
			(* int ts_stash_victim  = Array.getAndset(ts_stash, 0, ts_victim_2); *)
			(* generate insert (key_victim_2, first_key, retry_ct); *)
		(* } *)
	 }
}