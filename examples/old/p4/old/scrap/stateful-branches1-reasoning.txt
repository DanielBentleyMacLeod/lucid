reasoning


why is array_getAndset_6 striped across stages 3 and 5?

|3      |array_getAndset_6           | insert   | 72  | int ts_victim_1  = Array.getAndset(ts_1, h1, cur_ts);


Its in stage 5 because it accesses the register ts_1. 


|5      |array_set_18                | packetin | 33  | int junk1 = Array.set(ts_1, h1, cur_ts);


why is ts_1 in stage 5? It must be, due to the length of the critical path that accesses ts_1 in packetin: 


|3      |array_get_17                | packetin | 31  | int key_stored_1 = Array.get(key_1, h1);
|4      |if_41_selector              | packetin | 43  | if (key_stored_1 == 1) {
|5      |array_set_18                | packetin | 33  | int junk1 = Array.set(ts_1, h1, cur_ts);


So then.. why does array_getAndset_6 also appear in stage 3? 
|3      |array_getAndset_6           | insert   | 72  | int ts_victim_1  = Array.getAndset(ts_1, h1, cur_ts);


The prior statement is in stage 3 because of key_1 dependencies from the packetin branch: 

|3      |array_getAndset_5           | insert   | 70  | int key_victim_1 = Array.getAndset(key_1, h1, key);

So 3::array_getAndset_6 is some type of bridge? 

That *kind of* makes sense. 


========== Why is ts_stash in stage 4? ==========

|4      |array_getCondset_23         | packetin | 48  | int stashed_ts  = Array.getCondset(ts_stash, 0, cur_ts, ==, 0 );

- Because its only conditioned on key_stored_1, so it works. 

If we change the condition to: 

if (key_stored_2 == 1) {

then it doesn't compile, with: 
[TOFINO COMPILER] >>> ./switch/pipe/switch.bfa:1870: error: action instruction addr 0 in use elsewhere

Also, its still putting packetin::ts_2 in stage 6, after packetin::key_stash and packetin::ts_stash in stage 4. 


|3      |array_get_17                | 31 |    int key_stored_1 = Array.get(key_1, h1); (* stub: Array.cmp(key_1, h1) *)
|5      |if_32_selector              | 32 |    if (key_stored_1 == 1) { (* stub: && (if key is wider than 1 word) *)
|5      |array_set_18                | 33 |        int junk1 = Array.set(ts_1, h1, cur_ts);
|5      |array_get_19                | 37 |    int key_stored_2 = Array.get(key_2, h2);
|6      |if_35_selector              | 38 |    if (key_stored_2 == 1) {
|6      |array_set_20                | 39 |        int junk2 = Array.set(ts_2, h2, cur_ts);


Why this layout? 

I would expect:

key_1: stage 3
ts_1:  stage 3 or 4

ignores pragmas to put ts_1 in stage 3, or stage 4....


Actually, this layout is wrong.


line # 			stage 		statement  
36				5			int key_stored_2 = Array.get(key_2, h2);
37				6			if (key_stored_2 == 1) {
38				6				int junk2 = Array.set(ts_2, h2, cur_ts);
39				-			}
40				-
41				3			if (flow_dir == 0) {
42				4				if (key_stored_2 == 1) {
46				4					int stashed_key = Array.getCondset(key_stash, 0, key, ==, 0); 
47				4					int stashed_ts  = Array.getCondset(ts_stash, 0, cur_ts, ==, 0 );
48				-				}
49				-			}


|5      |array_get_19                | 36 int key_stored_2 = Array.get(key_2, h2);
|6      |if_35_selector              | 37 if (key_stored_2 == 1) {
|6      |array_set_20                | 38 int junk2 = Array.set(ts_2, h2, cur_ts);
|3      |if_47_selector              | 41 if (flow_dir == 0) {
|4      |if_41_selector              | 42 if (key_stored_2 == 1) {
|4      |array_getCondset_22         | 46 int stashed_key = Array.getCondset(key_stash, 0, key, ==, 0); 
|4      |array_getCondset_23         | 47 int stashed_ts  = Array.getCondset(ts_stash, 0, cur_ts, ==, 0 );





RESET: was looking at the wrong file...

(*3*)	int key_stored_1 = Array.get(key_1, h1); (* stage 3 *)
(*4*)	if (key_stored_1 == 1) {            (* stage 4 *)
(*5*)		int junk1 = Array.set(ts_1, h1, cur_ts); (* stage 5 *)
	}

	(* check stage 2 *)
(*5*)	int key_stored_2 = Array.get(key_2, h2); (* stage 5 *)
(*6*)	if (key_stored_2 == 1) { (* stage 6 *)
(*7*)		int junk2 = Array.set(ts_2, h2, cur_ts); (* stage 7 *)
	}

(*6*)	if (flow_dir == 0) { (* stage 8 *)
(*7*)		if (key_stored_2 == 1) { (* stage 9 *)
			generate continue(src, dst);
		}
		else {
(*8*)			int stashed_key = Array.getCondset(key_stash, 0, key, ==, 0); (* stage 10 *)
(*8*)			int stashed_ts  = Array.getCondset(ts_stash, 0, cur_ts, ==, 0 ); (* stage 10 *)
			(* if the stash was empty, generate an insert and permit the packet. *)
			if (stashed_key == 0) { (* stage 11 *)
				generate insert(key, key, 0);
				generate continue(src, dst);
			}
		}
	}


It seems to always put ts_2 after stash. Why? 

Even if we access ts_stash last in both branches...






Next: 

Map a more complicated example that requires more stages. Does it make sense? 

this compiles, without using any extra stages: 
if (key_victim_1 != 0) {
    int key_victim_2 = Array.getAndset(key_2, h2, key_victim_1);
    if (key_victim_2 != 0) {
    	generate insert (key_victim_2, first_key, retry_ct);
    }
}

this doesn't compile: 
if (key_victim_1 != 0) {
    int key_victim_2 = Array.getAndset(key_2, h2, key_victim_1);
    if (key_victim_2 != 0) {
        int ts_stash_victim  = Array.getAndset(ts_stash, 0, ts_victim_2);
    }
}



this doesn't compile: 
if (key_victim_1 != 0) {
    int key_victim_2 = Array.getAndset(key_2, h2, key_victim_1);
    if (key_victim_2 != 0) {
        int ts_stash_victim  = Array.getAndset(ts_stash, 0, ts_victim_2);
    }
}



