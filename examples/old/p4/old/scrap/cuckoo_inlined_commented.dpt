(* 
   A program that uses a cuckoo hash table to 
   calculate how long each source has been active for.  
*)
(* int stage_size = 512; *)
(* key and value arrays. *)
Array keys_1 = Array.create(512);
Array vals_1 = Array.create(512);

Array keys_2 = Array.create(512);
Array vals_2 = Array.create(512);

(* The stash stores a temporarily displaced key, 
   which may occur during an insert. *)
Array key_stash = Array.create(1, 8);
Array val_stash = Array.create(1, 9);

int NULL = 0;

int SUCCESS = 0;
int FAIL    = 1;

(* lookup the time when the src was first seen. *)
handle packetin(int src, int dst) { 
    int cur_ts = Sys.time(1);
    int start_ts = 0;
    int key_found = 0;

    (* BEGIN INLINE:     get(src, start_ts); *)
    (* set parameters *)
    int get_h1 = src + 1298724972;
    int get_h2 = src + 87593720; 
    int get_loaded_key = Array.get(keys_1, get_h1);
    int key_diff = get_loaded_key - src;
    if (key_diff == 0) {
        key_found = 1;
        start_ts = Array.get(vals_1, get_h1);
    }
    else {
        get_loaded_key = Array.get(keys_2, get_h2);
        key_diff = get_loaded_key - src;
        if (key_diff == 0) {
            key_found = 1;
            start_ts = Array.get(vals_2, get_h2);
        }
    }
    (* END INLINE:     get(src, start_ts); *)

    (* the key is not in the hash table, try to insert it *)
    if (key_found == 0) {
        (* BEGIN INLINE: try_insert(src, cur_ts, status *)
        int stashed_key = Array.getCondset(key_stash, 0, src, ==, 0);
        (* we can start the insert if the stash is empty. *)    
        if (stashed_key == 0) {
            int junk_0 = Array.set(val_stash, 0, cur_ts);
            generate insert(src, cur_ts, src, 0);
        }
        else {
            (* inform the controller that the insert failed.*)
            generate report_insert_fail(src);
        }
    }
    else {
        int duration = cur_ts - start_ts;
        (* do something with duration. E.g., change route once flow lasts more than 1ms. *) 
        if (duration < 1000){
            dst = 1;
        }
    }
    
    (* always continue *)
    generate continue(src, dst);
}

handle insert(int key, int val, int first_key, int num_first_reinserts) {
    (* 
        insert the (key, val) pair into the hash table. 
        Assumes that key is not already in the table. 
    *)
    (*  
        When we encounter the first key that we tried to insert 3 times, 
        we know that the installation is unlikely to succeed with the 
        current hash functions. So we can stop here, clear the stash, 
        and notify the controller. In a more sophisticated implementation, 
        we could also change one of the hash functions and 
        rebuild the arrays. 
    *)
    int h = key + 1298724972;
    int h2 = key + 87593720; 
    int victim_key = Array.getAndset(keys_1, h, key);
    int victim_val = Array.getAndset(vals_1, h, val);

    (* if there was a victim, move it to the second stage. *)
    if (victim_key != 0) {
        victim_key = Array.getAndset(keys_2, h2, victim_key);
        victim_val = Array.getAndset(vals_2, h2, victim_val);
    }
    (* if there's a victim, we want to reinsert it. But before we do, we must check for 
       cycles in the sequence of inserted elements. We detect a cycle by counting the 
       number of times the first element has been re-inserted. *)
    int key_diff = victim_key - first_key;
    if (key_diff == 0) {
        num_first_reinserts = num_first_reinserts + 1;
    }
    (* if we have tried to reinsert the original entry twice, there is a cycle and we cannot succeed. *)
    (* https://cs.stackexchange.com/questions/75225/cuckoo-hashing-proof-of-cycle *)
    if (num_first_reinserts == 2){
        victim_key = 0;
        victim_val = 0;
        generate report_insert_fail(first_key); (* Note: a more sophisticated implementation could rebuild the arrays with different hash keys. *)
    }
    int junk_3 = Array.set(key_stash, 0, victim_key);
    int junk_4 = Array.set(val_stash, 0, victim_val);                
    (* if the victim is not NULL, try re-inserting it. *)        
    if (victim_key != 0){
        generate insert(victim_key, victim_val, first_key, num_first_reinserts);
    }
}
(* inform the controller that an insert operation has failed for a given source. *)
handle report_insert_fail(int src) {
    report_int src;
}



(* insert a (src, dst) tuple into the table. *)
handle insert (int src, int dst, int first_src, int first_dst, int retry_ct) {
    int cur_ts = Sys.time(1);
    int hash_base = src + dst;
    retry_ct = retry_ct + 1;
    int stored_src = Array.getAndset(src_1, hash_base, src);
    int stored_dst = Array.getAndset(dst_1, hash_base, dst);
    if (stored_src != 0) {
        int stored_src2 = Array.getAndset(src_2, hash_base, stored_src);
    }    
}