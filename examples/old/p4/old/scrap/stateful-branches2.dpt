(* 
    A simple stateful firewall with a cuckoo insertion thread.
    [8/6/20]
    The resulting P4 must be compiled with the compiler flag: 
        --table-placement-in-order
        or metadata initialization will fail and there won't be enough stages
    There are many todos:
        - 64 bit keys (concatenation and / or wider arrays)
        - Array.cmp
        - Register allocation for sALU inputs to support a background table cleanup thread
        - An insert queue
        - And probably more ...
*)


Array key_1 = Array.create(1024);
Array ts_1  = Array.create(1024);

Array key_2 = Array.create(1024);
Array ts_2  = Array.create(1024);

Array key_stash = Array.create(1);


handle packetin (int src, int dst) {
    int cur_ts = Sys.time(1);
    int flow_dir = 0;
    int key = 0;
    
    if (src != 10) {
        flow_dir = 1;
        key = src; (* stub: concat(src,dst) *)
    }
    else {
        key = dst; (* stub: concat(dst,src) *)
    }
    int h1 = key + 10398247; (* stub: hash function *)
    int h2 = key + 1295981879; (* stub: hash function *)

    (* check stage 1 *)
    int key_stored_1 = Array.get(key_1, h1); (* stub: Array.cmp(key_1, h1) *)
    if (key_stored_1 == 1) { (* stub: && (if key is wider than 1 word) *)
        int junk1 = Array.set(ts_1, h1, cur_ts);
    }

    (* check stage 2 *)
    int key_stored_2 = Array.get(key_2, h2);
    if (key_stored_2 == 1) { (* stub: && (if key wider than 1 word) *)
        int junk2 = Array.set(ts_2, h2, cur_ts);
    }

    int key_stored_1_or_2 = key_stored_1 + key_stored_2;
    if (key_stored_1_or_2 == 1) { (* stub: key_stored_1 || key_stored_2 *)
        generate continue(src, dst);
    }
    else {
        if (flow_dir == 0) {
            int stashed_key = Array.getCondset(key_stash, 0, key, ==, 0);
            int stashed_key_eq = key - stashed_key;
            if (stashed_key == 0) { (* the stash is empty. We can insert. *)
                generate insert (key, cur_ts, key, 0);
                generate continue (src, dst);
            }
            else {
                if (stashed_key_eq == 0) { (* the flow's key is in the stash, no need to insert. *)
                    generate continue (src, dst);
                }
                else { (* An install is in flight. Report the error to someone. *)
                    report_int key;
                }
            }
        }
        else { (* reverse direction flow *)
            int key_stored_stash = Array.get(key_stash, 0); (* placeholder for comp.*)
            if (key_stored_stash == 0) {
                generate continue(src, dst);
            }
        }
    }
}

handle insert (int key, int ts, int first_key, int retry_ct) {
    (* int cur_ts = Sys.time(1);     *)
    int h1 = key + 10398247; (* stub: hash function *)
    int h2 = key + 1295981879; (* stub: hash function *)

    (* insert / replace to stage 1 *)
    int key_victim = Array.getAndset(key_1, h1, key);
    int ts_victim  = Array.getAndset(ts_1, h1, ts);

    (* insert / replace to stage 2 *)
    if (key_victim != 0) {
        key_victim = Array.getAndset(key_2, h2, key_victim);        
        ts_victim  = Array.getAndset(ts_2, h2, ts_victim);
    }

    (* increment retry_ct *)
    int key_diff = key_victim - first_key;
    if (key_diff == 0) {
        retry_ct = retry_ct + 1;
    }

    (* check for cycle *)    
    if (retry_ct == 2) {
        key_victim = 0;
        ts_victim = 0;
    }

    (* update or clear stash *)
    int junk3 = Array.set(key_stash, 0, key_victim);
    (* generate insert *)
    if (key_victim != 0) {
        generate insert (key_victim, ts_victim, first_key, retry_ct);
    }
}
