(* Stateful firewall with flow timeouts. *) 
(* hosts with addresses from 0 - 9 are internal, any others are external. *)

(* A 2 stage hash table that maps (src, dst) --> ts *)
(* Note: you have to hand-stage _all_ of these tables to compile...*)
Array src_1 = Array.create(1024, 2);
Array dst_1 = Array.create(1024, 2);
Array ts_1  = Array.create(1024, 4);

Array src_2 = Array.create(1024, 5);
Array dst_2 = Array.create(1024, 5);
Array ts_2  = Array.create(1024, 7);

Array src_stash = Array.create(1, 8);
Array dst_stash = Array.create(1, 8);
Array ts_stash = Array.create(1, 8);

handle packetin (int src, int dst) {
    int cur_ts = Sys.time(1);
    int hash_base = src + dst;
    int h1 = hash_base + 10398247; (* a really simple hash function. *)
    int h2 = hash_base + 1295981879; (* a really simple hash function. *)
    int key_found = 0;
    int tmp = src;
    int return_flow = 0;
    (* swap src and dest if the packet is in a return flow. *)
    if (src != 10) {
        src = dst;
        dst = tmp;
        return_flow = 1;
    }
    (* check stage 1 arrays. *)
    int stored_src = Array.get(src_1, h1);
    int stored_dst = Array.get(dst_1, h1);
    int src_diff = stored_src - src;
    int dst_diff = stored_dst - dst;
    if (src_diff == 0){
        if (dst_diff == 0){
            key_found = 1;
            (* if return_flow = 0 *)
            int junk1 = Array.set(ts_1, h1, cur_ts);
        }
    }
    (* check stage 2 arrays. *)
    if (key_found != 1) {
        stored_src = Array.get(src_2, h2);
        stored_dst = Array.get(dst_2, h2);
        src_diff = stored_src - src;
        dst_diff = stored_dst - dst;
        if (src_diff == 0){
            if (dst_diff == 0){
                key_found = 1;
                int junk2 = Array.set(ts_2, h2, cur_ts);
            }
        }
    }


    if (key_found) {
        generate continue(src, dst);
    }
    (* if the key was not found, and the packet belongs to a flow from a 
       local source, we try to insert the key into the table. *)
    else {
        if (key_found == 0) {
            (* put (src, dst, ts) into stash if the stash is empty. *)
            stored_src = Array.getCondset(src_stash, 0, src, ==, 0);
            stored_dst = Array.getCondset(dst_stash, 0, dst, ==, 0);
            int stored_ts  = Array.getCondset(ts_stash, 0, cur_ts, ==, 0);
            (* if the stash was empty, generate an insert and permit the packet. *)
            if (stored_src == 0) {
                generate insert(src, dst, src, dst, 0);
                generate continue(src, dst);
            }
        }
    }
}

handle insert (int src, int dst, int first_src, int first_dst, int retry_ct) {

    int cur_ts = Sys.time(1);
    int hash_base = src + dst;
    int h1 = hash_base + 10398247;
    int h2 = hash_base + 1295981879;

    (* retry_ct = retry_ct + 1; *)
    (* put the new entry into stage 1, possibly evicting someone. *)

    int stored_src = Array.getAndset(src_1, h1, src);
    int stored_dst = Array.getAndset(dst_1, h1, dst);
    int stored_ts  = Array.getAndset(ts_1, h1, cur_ts);

    (* if an evict happened, put the evicted entry into stage 2, possibly evicting someone else. *)


    if (stored_src != 0) {
        stored_src = Array.getAndset(src_2, h2, stored_src);
        stored_dst = Array.getAndset(dst_2, h2, stored_dst);
        stored_ts = Array.getAndset(ts_2, h2, stored_ts);
    }

    int src_diff = stored_src - first_src;
    int dst_diff = stored_dst - first_dst;
    if (src_diff == 0){
        (* if (dst_diff == 0){ *)
            retry_ct = retry_ct + 1;
        (* } *)
    }

(*     if (retry_ct == 2){
        stored_src = 0;
        stored_dst = 0;
    }
    int junk3 = Array.set(src_stash, 0, stored_src);
 *)

(*     int junk4 = Array.set(dst_stash, 0, stored_dst);
    int junk5 = Array.set(ts_stash, 0, stored_ts);
 *)
    (* generate insert (stored_src, stored_dst, first_src, first_dst, retry_ct); *)



}
