/*
    A simple stateful firewall with a cuckoo insertion thread.
    [8/6/20]
    The resulting P4 must be compiled with the compiler flag: 
        --table-placement-in-order
        or metadata initialization will fail and there won't be enough stages
    There are some todos:
        - Array.cmp
        - An insert queue
        - correct stage number annotations, understand why they're slightly off
*/
/* this program compiles with @pa_no_overlay and @pa_solitary on all metadata fields. */

global v_1_src = new Array<<32>>(1024);
global v_1_dst = new Array<<32>>(1024);

global v_1_ts  = new Array<<32>>(1024);

global v_2_src = new Array<<32>>(1024);
global v_2_dst = new Array<<32>>(1024);

global v_2_ts  = new Array<<32>>(1024);

global src_stash = new Array<<32>>(1);
global dst_stash = new Array<<32>>(1);


handle packetin (int src, int dst) {
/* stage 1 */
    int src_tmp = src;
    int dst_tmp = dst;
    int h1h = Sys.hash(32, 10398247, src, dst); 
    int cur_ts = Sys.time(1);
    
/* stage 2 (depends on h1h) */
    int v_1_src_stored = Array.get(v_1_src, h1h);/* cmp */
    int v_1_dst_stored = Array.get(v_1_dst, h1h);/* cmp */

    /* found in first table */
/* stage 3 */
    if (v_1_src_stored==1 && v_1_dst_stored==1) {
        Array.set(v_1_ts, h1h, cur_ts);
        generate continue(src_tmp, dst_tmp);
    }
    else {
/* stage 3 */
        int h2h = Sys.hash(32, 1295981879, src_tmp, dst_tmp);
/* stage 4 */
        int v_2_src_stored = Array.get(v_2_src, h2h);/* cmp */
        int v_2_dst_stored = Array.get(v_2_dst, h2h); /* cmp */
/* stage 5 */
        if (v_2_src_stored==1 && v_2_dst_stored==1) {
            Array.set(v_2_ts, h2h, cur_ts);
            generate continue(src_tmp, dst_tmp);
        }
        /* not found in either table */
        else {
            /* check stash for forward direction of flow */
            if (src_tmp == 10) { /* this should be a P4 controller-managed table */
/* stage 5&6 (spill overhead for src_tmp) */
                int stashed_src = Array.getCondset(src_stash, 0, src_tmp, ==, 0);
                int stashed_dst = Array.getCondset(dst_stash, 0, dst_tmp, ==, 0);
/* stage 7 */            
                int stashed_src_eq = src_tmp - stashed_src;
                int stashed_dst_eq = dst_tmp - stashed_dst;
                /* stash is empty: insert and continue. */
                if (stashed_src == 0 && stashed_dst == 0) {
                    generate insert (src_tmp, dst_tmp, cur_ts, src_tmp, dst_tmp, 0);
                    generate continue (src_tmp, dst_tmp);
                }
                else {
/* stage 8 */   
                    /* found in stash */
                    if (stashed_src_eq == 0 && stashed_dst_eq == 0) {
                        generate continue (src_tmp, dst_tmp);                    
                    }
                }
            }
            /* reverse direction stash check */
            else {
/* stage 5&6 */                
                int src_stored_stash = Array.get(src_stash, 0);/* cmp (or do eq check after) */
                int dst_stored_stash = Array.get(dst_stash, 0);/* cmp */
/* stage 7 */                 
                /* stored, safe to continue */
                if (src_stored_stash == 0 && dst_stored_stash == 0) {
                    generate continue(src_tmp, dst_tmp);
                }
            }
        }
    }
}


handle insert (int src, int dst, int ts, int first_src, int first_dst, int<<8>> retry_ct) {
/* stage 1 */
    int src_tmp = src;
    int dst_tmp = dst;
    int h1h = Sys.hash(32, 10398247, src, dst);
/* stage 2 */
    /* insert and evict to table 1 */
    int src_victim = Array.getAndset(v_1_src, h1h, src_tmp);
    int dst_victim = Array.getAndset(v_1_dst, h1h, dst_tmp);

/* stage 3 [PACKETIN] */
    int ts_victim  = Array.getAndset(v_1_ts, h1h, ts);

    /* if there was a collision, insert and evict to table 2 */
/* stage 3 */
    if (src_victim == 0 && dst_victim == 0) { /* (placeholder for OR of NEQs) (test that something was evicted) */
        int h2h = Sys.hash(32, 1295981879, src_victim, dst_victim);
/* stage 4 */
        int v_2_src_victim = Array.getAndset(v_2_src, h2h, src_victim);
        int v_2_dst_victim = Array.getAndset(v_2_dst, h2h, dst_victim);        
/* stage 5 [PACKETIN] */        
        int v_2_ts_victim  = Array.getAndset(v_2_ts, h2h, ts_victim);

        /* If there was a collision, place the evicted element 
           into the stash and attempt to re-insert it. */
        if (v_2_src_victim == 0 && v_2_dst_victim == 0) { /* placeholder for OR of NEQs (test that something was evicted) */
/* stage 5 & 6 */        
            Array.set(src_stash, 0, v_2_src_victim);
            Array.set(dst_stash, 0, v_2_dst_victim);            
            generate reinsert(v_2_src_victim, v_2_dst_victim, v_2_ts_victim, first_src, first_dst, retry_ct);
        }
    }
}
/* check for a loop and possibly call insert again. */
handle reinsert(int src, int dst, int ts, int first_src, int first_dst, int<<8>> retry_ct) {
    /* check if we're re-inserting the original element */
    int src_diff = src - first_src;
    int dst_diff = dst - first_dst;    
    if (src_diff == 0 && dst_diff == 0) {
        retry_ct = retry_ct + 1;
    }
    /* if there's an unresolvable cycle, clear the stash. */
    if (retry_ct == 2) {    
        Array.set(src_stash, 0, 0);
        Array.set(dst_stash, 0, 0);            
    }
    /* if not, generate an insert. (the entry is already stashed) */
    else {  
        generate insert(src, dst, ts, first_src, first_dst, retry_ct);
    }
}


handle scan (int cur_idx, int<<8>> stage) {
    /* calculate next index and stage, in case of scan */
    /* we put this at the top so it can be overlaid with the
       other logic */
    /* precompute next scan address */
    int next_scan_idx = cur_idx + 1;
    if (next_scan_idx == 0) {
        if (stage == 1) {
            next_stage = 2;
        }
        else {
            next_stage = 1;
        }
    }

    int v_1_cur_idx_tmp = cur_idx; /* local copy to ease salu input merging. */
    int v_2_cur_idx_tmp = cur_idx; /* local copy to ease salu input merging. */
    int<<8>> next_stage = stage;
    int ts = Sys.time(1);
    int last_ts = 0;
    if (stage == 1) {
        last_ts = Array.get(v_1_ts, v_1_cur_idx_tmp);
    }
    else {
        last_ts = Array.get(v_2_ts, v_2_cur_idx_tmp);
    }
    int time_since_update = ts - last_ts;
    /* placeholder: should be inequality. */
    if (1000 == time_since_update)  {                
        generate delete(cur_idx, stage); /* DELETE */
    }
    else {
        generate scan(next_scan_idx, next_stage);    
    }
}

/* 
Delete should really check key. There is an edge case: 
   1. scan checks slot i and sees that it is timed out. So it generates a delete. 
   2. an insert occurs, replacing the item in slot i with something else.
   3. the delete occurs, deleting the item in slot i, which is now the wrong item. 
*/
handle delete (int cur_idx, int<<8>> stage) {
    int<<8>> next_stage = stage;
    int next_idx = cur_idx + 1; /* local copy to ease salu input merging. */
    int v_1_cur_idx_tmp = cur_idx; /* local copy to ease salu input merging. */
    int v_2_cur_idx_tmp = cur_idx; /* local copy to ease salu input merging. */
    if (stage == 1) {
        Array.set(v_1_src, v_1_cur_idx_tmp, 0);        
        Array.set(v_1_dst, v_1_cur_idx_tmp, 0);        
        Array.set(v_1_ts, v_1_cur_idx_tmp, 0);        
    }
    else {
        Array.set(v_2_src, v_2_cur_idx_tmp, 0);
        Array.set(v_2_dst, v_2_cur_idx_tmp, 0);
        Array.set(v_2_ts, v_2_cur_idx_tmp, 0);        
    }
    /* increment index and continue scanning */
    if (next_idx == 0) {
        if (stage == 1) {
            next_stage = 2;
        }
        else {
            next_stage = 1;
        }
    }
    generate scan(next_idx, next_stage);    
}


