/*
    A simple stateful firewall with a cuckoo insertion thread.
    [11/26/20]
    minor todos (basically optional):
        - An insert queue
        - edge case in delete 
*/
const int num_entries = 1024;
const int timeout_thresh = 10000;
const int NULL = 0;
const int TRUE = 1;
const int FALSE = 0;

global v_1_src = new Array<<32>>(num_entries);
global v_1_dst = new Array<<32>>(num_entries);

global v_1_ts  = new Array<<32>>(num_entries);

global v_2_src = new Array<<32>>(num_entries);
global v_2_dst = new Array<<32>>(num_entries);

global v_2_ts  = new Array<<32>>(num_entries);

global src_stash = new Array<<32>>(1);
global dst_stash = new Array<<32>>(1);

/* get_functions */
memop int get_mem(int stored_val, int unused) {
    return stored_val;
}
memop int no_get(int stored_val, int unused) { 
    return NULL;
}
memop int get_cmp(int stored_val, int target_val) {
    if (stored_val == target_val){
        return TRUE;
    }
    else {
        return FALSE;
    }
}
/* check if timestamp is older than threshold. */
memop int get_is_over_thresh(int stored_ts, int cur_ts) {
    if (cur_ts - stored_ts > timeout_thresh) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}

/* set functions */
memop int set_mem(int stored_val, int new_val) { 
    return new_val;
}
memop int set_null(int stored_val, int unused) { 
    return 0;
}
memop int set_mem_if_null(int stored_val, int new_val) {
    if (stored_val == NULL) {
        return new_val;
    }
    else {
        return stored_val;
    }
}

event packetin (int<<32>> src, int<<32>> dst);
event continue (int<<32>> src, int<<32>> dst);

handle packetin (int<<32>> src, int<<32>> dst) {
    int src_tmp = src;
    int dst_tmp = dst;
    int<<32>> h1h = hash<<32>>( 10398247, src, dst); 
    int cur_ts = Sys.time(1);
    
    /* check if the key is in the first hash table stage */
    int v_1_src_stored = Array.getm(v_1_src, h1h, get_cmp, src_tmp);
    int v_1_dst_stored = Array.getm(v_1_dst, h1h, get_cmp, dst_tmp);
    // int v_1_src_stored = Array.update(v_1_src, h1h, get_cmp, src_tmp);
    // int v_1_dst_stored = Array.update(v_1_dst, h1h, get_cmp, dst_tmp);

    /* found in first stage of hash table */
    if (v_1_src_stored==1 && v_1_dst_stored==1) {
        /* Array.set(v_1_ts, h1h, cur_ts); */
        Array.setm(v_1_ts, h1h, set_mem, cur_ts);
        // Array.update(v_1_ts, h1h, no_get, set_mem, cur_ts);
        generate continue(src_tmp, dst_tmp);
    }
    else {
        int h2h = hash<<32>>( 1295981879, src_tmp, dst_tmp);
        /* check if the key is in the second hash table stage. */
        int v_2_src_stored = Array.getm(v_2_src, h2h, get_cmp, src_tmp);
        int v_2_dst_stored = Array.getm(v_2_dst, h2h, get_cmp, dst_tmp);
        // int v_2_src_stored = Array.update(v_2_src, h2h, get_cmp, src_tmp);
        // int v_2_dst_stored = Array.update(v_2_dst, h2h, get_cmp, dst_tmp);
        if (v_2_src_stored==1 && v_2_dst_stored==1) {
            /* Array.set(v_2_ts, h2h, cur_ts); */
            Array.setm(v_2_ts, h2h, set_mem, cur_ts);
            // Array.update(v_2_ts, h2h, no_get, set_mem, cur_ts);
            generate continue(src_tmp, dst_tmp);
        }
        /* not found in either table */
        else {
            /* check stash for forward direction of flow */
            if (src_tmp == 10) { /* this should be a P4 controller-managed table */
                /* int stashed_src = Array.getCondset(src_stash, 0, src_tmp, ==, 0);
                int stashed_dst = Array.getCondset(dst_stash, 0, dst_tmp, ==, 0);*/
                int stashed_src = Array.update(src_stash, 0, get_mem, 0, set_mem_if_null, src_tmp);
                int stashed_dst = Array.update(dst_stash, 0, get_mem, 0, set_mem_if_null, dst_tmp);

                int stashed_src_eq = src_tmp - stashed_src;
                int stashed_dst_eq = dst_tmp - stashed_dst;
                /* stash is empty: insert and continue. */
                if (stashed_src == 0 && stashed_dst == 0) {
                    generate insert (src_tmp, dst_tmp, cur_ts, src_tmp, dst_tmp, 0);
                    generate continue (src_tmp, dst_tmp);
                }
                else {
                    /* found in stash */
                    if (stashed_src_eq == 0 && stashed_dst_eq == 0) {
                        generate continue (src_tmp, dst_tmp);                    
                    }
                }
            }
            /* reverse direction stash check */
            else {
                /* check if src and dst are in the stash */
                int src_stored_stash = Array.getm(src_stash, 0, get_cmp, src_tmp);
                int dst_stored_stash = Array.getm(dst_stash, 0, get_cmp, dst_tmp);
                // int src_stored_stash = Array.update(src_stash, 0, get_cmp, src_tmp);
                // int dst_stored_stash = Array.update(dst_stash, 0, get_cmp, dst_tmp);
                /* stored, safe to continue */
                if (src_stored_stash == 0 && dst_stored_stash == 0) {
                    generate continue(src_tmp, dst_tmp);
                }
            }
        }
    }
}

event insert (int src, int dst, int ts, int first_src, int first_dst, int<<8>> retry_ct);

handle insert (int src, int dst, int ts, int first_src, int first_dst, int<<8>> retry_ct) {
    int src_tmp = src;
    int dst_tmp = dst;
    int h1h = hash<<32>>( 10398247, src, dst);
    /* insert and evict to table 1 */
    /* int src_victim = Array.getAndset(v_1_src, h1h, src_tmp); */
    int src_victim = Array.update(v_1_src, h1h, get_mem, 0, set_mem, src_tmp);
    /* int dst_victim = Array.getAndset(v_1_dst, h1h, dst_tmp); */
    int dst_victim = Array.update(v_1_dst, h1h, get_mem, 0, set_mem, dst_tmp);

    /* int ts_victim  = Array.getAndset(v_1_ts, h1h, ts); */
    int ts_victim = Array.update(v_1_ts, h1h, get_mem, 0, set_mem, ts);

    /* if there was a collision, insert and evict to table 2 */
    if (src_victim == 0 && dst_victim == 0) { 
        int junk1var = 0;
    }
    else {
        /* we actually need to test src_victim != 0 || dst_victim != 0, 
        but that's not supported in the backend yet. */
        int h2h = hash<<32>>( 1295981879, src_victim, dst_victim);
        /*int v_2_src_victim = Array.getAndset(v_2_src, h2h, src_victim);*/
        int v_2_src_victim = Array.update(v_2_src, h2h, get_mem, 0, set_mem, src_victim);

        /*int v_2_dst_victim = Array.getAndset(v_2_dst, h2h, dst_victim);*/     
        int v_2_dst_victim = Array.update(v_2_dst, h2h, get_mem, 0, set_mem, dst_victim);
        /*int v_2_ts_victim  = Array.getAndset(v_2_ts, h2h, ts_victim);*/
        int v_2_ts_victim = Array.update(v_2_ts, h2h, get_mem, 0, set_mem, ts_victim);

        /* we actually need to test v_2_src_victim != 0 || v_2_dst_victim != 0, 
        but that's not supported in the backend yet. */
        if (v_2_src_victim == 0 && v_2_dst_victim == 0) { 
            int junk2var = 0;
        }
        else {
            /*Array.set(src_stash, 0, v_2_src_victim);*/
            Array.setm(src_stash, 0, no_get, set_mem, v_2_src_victim);
            // Array.update(src_stash, 0, no_get, set_mem, v_2_src_victim);
            /*Array.set(dst_stash, 0, v_2_dst_victim);*/            
            Array.setm(dst_stash, 0, no_get, set_mem, v_2_dst_victim);
            // Array.update(dst_stash, 0, no_get, set_mem, v_2_dst_victim);
            generate reinsert(v_2_src_victim, v_2_dst_victim, v_2_ts_victim, first_src, first_dst, retry_ct);
        }
    }
}
/* check for an insertion cycle and possibly call insert again. */
event reinsert(int src, int dst, int ts, int first_src, int first_dst, int<<8>> retry_ct);
handle reinsert(int src, int dst, int ts, int first_src, int first_dst, int<<8>> retry_ct) {
    /* check if we're re-inserting the original element */
    int src_diff = src - first_src;
    int dst_diff = dst - first_dst;    
    if (src_diff == 0 && dst_diff == 0) {
        retry_ct = retry_ct + 1;
    }
    /* if there's an unresolvable cycle, clear the stash. */
    if (retry_ct == 2) {        
        /*Array.set(src_stash, 0, 0);*/
        Array.set(src_stash, 0, 0);
        // Array.update(src_stash, 0, no_get, set_null);
        /*Array.set(dst_stash, 0, 0);*/           
        Array.set(dst_stash, 0, 0); 
        // Array.update(dst_stash, 0, no_get, set_null); 
    }
    /* if not, generate an insert. (the entry is already stashed) */
    else {  
        generate insert(src, dst, ts, first_src, first_dst, retry_ct);
    }
}

event scan (int prev_idx, int<<8>> prev_stage);
handle scan (int prev_idx, int<<8>> prev_stage) {
    /* calculate current address to scan */
    int ts = Sys.time(1);
    int over_thresh = 0; 
    int next_scan_idx = 0;
    int<<8>> next_stage = 0;
    if (prev_stage == 1) {
        next_stage = 2;
    }
    else { /* prev_stage == 2 */
        next_scan_idx = prev_idx + 1;
        next_stage = 1;
    }
    if (next_stage == 1) {
        over_thresh = Array.getm(v_1_ts, next_scan_idx, get_is_over_thresh, ts);
        // over_thresh = Array.update(v_1_ts, next_scan_idx, get_is_over_thresh, ts);
    }
    else {
        over_thresh = Array.getm(v_2_ts, next_scan_idx, get_is_over_thresh, ts);    
        // over_thresh = Array.update(v_2_ts, next_scan_idx, get_is_over_thresh, ts);    
    }
    if (over_thresh == 1) {
        generate delete(next_scan_idx, next_stage); /* DELETE */        
    }
    else {
        generate scan(next_scan_idx, next_stage);            
    }
}

/* 
Delete should check key. There is an edge case: 
   1. scan checks slot i and sees that it is timed out. So it generates a delete. 
   2. an insert occurs, replacing the item in slot i with something else.
   3. the delete occurs, deleting the item in slot i, which is now the wrong item. 
*/

event delete (int cur_idx, int<<8>> cur_stage);
handle delete (int cur_idx, int<<8>> cur_stage) {
    int cur_idx_1_tmp = cur_idx;
    int cur_idx_2_tmp = cur_idx;
    /* set all arrays at this position to zero.  */
    if (cur_stage == 1) {
        Array.set(v_1_src, cur_idx_1_tmp, 0);
        Array.set(v_1_dst, cur_idx_1_tmp, 0);
        Array.set(v_1_ts, cur_idx_1_tmp, 0);
        // Array.update(v_1_src, cur_idx_1_tmp, no_get, set_null);
        // Array.update(v_1_dst, cur_idx_1_tmp, no_get, set_null);
        // Array.update(v_1_ts, cur_idx_1_tmp, no_get, set_null);
    }
    else {
        Array.update(v_2_src, cur_idx_2_tmp, 0);
        Array.update(v_2_dst, cur_idx_2_tmp, 0);
        Array.update(v_2_ts, cur_idx_2_tmp, 0);
        // Array.update(v_2_src, cur_idx_2_tmp, no_get, set_null);
        // Array.update(v_2_dst, cur_idx_2_tmp, no_get, set_null);
        // Array.update(v_2_ts, cur_idx_2_tmp, no_get, set_null);
    }
    /* continue scanning */
    generate scan(cur_idx, cur_stage);    
}


