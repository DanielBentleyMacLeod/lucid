int sz = 1024;
int log_sz = 10;
int NULL = 0;
Array keys_1 = Array.create<32>(sz);
Array values_1 = Array.create<32>(sz);

Array keys_2 = Array.create<32>(sz);
Array values_2 = Array.create<32>(sz);

event packetin (int src, int dst);
event insert   (int key, int val, int first_key, int first_val, int retry_ct);
event continue (int src, int dst, int priority);

/* lookup source in the hash table. */
fun lookup(key) {
	int ret_val = NULL;
	int<log_sz> h1 = Sys.hash<log_sz>(key);
	int<log_sz> h2 = Sys.hash<log_sz>(key);
	/* check first stage */
	/* if (keys_1[h1] == key): 
		ret true
	   else:
	    ret false	*/
	bool in_stage_1 = Array.cmp(keys_1, h1, key);

	if (in_stage_1) {
		ret_val = Array.get(values_1, h1);
	}
	else {
		bool in_stage_2 = Array.cmp(keys_2, h2, key);
		if (in_stage_2) {
			ret_val = Array.get(values_2, h2);
		}
	}
	return ret_val;
}

fun do_insert(int key, int val){
	generate insert(key, val, key, val, 0);
}

handle packetin (int src, int dst){
	int priority = lookup(src);
	if (priority == NULL) {
		do_insert(src, 10);
	}
	generate continue(src, dst, priority);
}

fun try_reinsert(key, val, first_key, first_val, retry_ct) {
	retry_ct = update_retry_ct(retry_ct, first_key, first_val, key_victim, val_victim);
	if (retry_ct < 3) {
		generate insert(key_victim, val_victim, first_key, first_val, retry_ct);
	}
}

handle insert (int key, int val, int first_key, int first_val, int retry_ct) {
	int<log_sz> h1 = Sys.hash<log_sz>(key);
	int<log_sz> h2 = Sys.hash<log_sz>(key);
	/* update kv 1 */
	int key_victim = Array.getAndset<32>(keys_1, h1, key);
	int val_victim = Array.getAndset<32>(values_1, h1, val);

	/* update kv 2 */
	if (src_victim != 0 && val_victim != 0){
		key_victim = Array.getAndset<32>(keys_2, h2, key_victim);
		val_victim = Array.getAndset<32>(values_2, h2, val_victim);
		if (key_victim != 0 && val_victim != 0) {
			try_reinsert(retry_ct, key_victim, val_victim, first_key, first_val);
		}
	}
}