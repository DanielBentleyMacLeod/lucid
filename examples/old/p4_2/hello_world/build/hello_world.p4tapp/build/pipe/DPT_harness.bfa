version:
  version: 1.0.1
  run_id: "901df41d0c3a20e2"
  target: Tofino
phv ingress:
  hdr.ethernet.dst_addr.0-15: TH5
  hdr.ethernet.dst_addr.16-47: TW3
  hdr.ethernet.src_addr.0-15: TH0
  hdr.ethernet.src_addr.16-31: TH1
  hdr.ethernet.src_addr.32-47: TH2
  hdr.ethernet.ether_type: H2
  hdr.dpt_extra_processing_in.dpt_87_eventType: TB0
  hdr.dpt_extra_processing_in.dpt_39_ip: W0
  hdr.dpt_extra_processing_out.dpt_82_eventType: B1
  hdr.dpt_extra_processing_out.dpt_74_ip: W3
  hdr.ip.version: TW0(28..31)
  hdr.ip.ihl: TW0(24..27)
  hdr.ip.diffserv: TW0(16..23)
  hdr.ip.total_len: TW0(0..15)
  hdr.ip.identification: TW1(16..31)
  hdr.ip.flags: TW1(13..15)
  hdr.ip.frag_offset: TW1(0..12)
  hdr.ip.ttl: TW2(24..31)
  hdr.ip.protocol: TW2(16..23)
  hdr.ip.hdr_checksum: TW2(0..15)
  hdr.ip.src_addr: W1
  hdr.ip.dst_addr.0-15: TH3
  hdr.ip.dst_addr.16-31: TH4
  md.dptMeta.eventType: B3
  md.dptMeta.nextEventType: B4
  md.dptMeta.exitEventType: B5
  md.dpt_continue.ip: W2
  ig_intr_md_for_tm.ucast_egress_port: H0(0..8)
  ig_intr_md_for_tm.mcast_grp_a: H1
  ig_intr_md_for_dprsr.drop_ctl: B0(0..2)
  hdr.ethernet.$valid: B2(0)
  hdr.dpt_extra_processing_in.$valid: B2(1)
  hdr.dpt_extra_processing_out.$valid: B2(2)
  hdr.ip.$valid: B2(3)
phv egress:
  eg_intr_md.egress_port: H16(0..8)
  hdr.ethernet.dst_addr.0-15: TH12
  hdr.ethernet.dst_addr.16-47: TW7
  hdr.ethernet.src_addr.0-15: TH6
  hdr.ethernet.src_addr.16-31: TH7
  hdr.ethernet.src_addr.32-47: TH8
  hdr.ethernet.ether_type: H17
  hdr.ip.version: TW4(28..31)
  hdr.ip.ihl: TW4(24..27)
  hdr.ip.diffserv: TW4(16..23)
  hdr.ip.total_len: TW4(0..15)
  hdr.ip.identification: TW5(16..31)
  hdr.ip.flags: TW5(13..15)
  hdr.ip.frag_offset: TW5(0..12)
  hdr.ip.ttl: TW6(24..31)
  hdr.ip.protocol: TW6(16..23)
  hdr.ip.hdr_checksum: TW6(0..15)
  hdr.ip.src_addr.0-15: TH9
  hdr.ip.src_addr.16-31: TH10
  hdr.ip.dst_addr.0-7: TB6
  hdr.ip.dst_addr.8-15: TB7
  hdr.ip.dst_addr.16-31: TH11
  hdr.dpt_extra_processing_in.dpt_87_eventType: TB4
  hdr.dpt_extra_processing_in.dpt_39_ip: TW8
  hdr.dpt_extra_processing_out.dpt_82_eventType: TB5
  hdr.dpt_extra_processing_out.dpt_74_ip: TW9
  hdr.ethernet.$valid: B16(0)
  hdr.ip.$valid: B16(1)
  hdr.dpt_extra_processing_in.$valid: B16(2)
  hdr.dpt_extra_processing_out.$valid: B16(3)
parser ingress:
  start: $entry_point
  init_zero: [ TB0, W0, B1, W3, B3, B4, B5, W2, B0, B2 ]
  bitwise_or: [ B2 ]
  hdr_len_adj: 16
  states:
    $entry_point:
      *:
        load: { byte1 : 0 }
        buf_req: 1
        next: start
    start:
      match: [ byte1 ]
      0b1*******:
        shift: 8
        buf_req: 8
        next: end
      0b0*******:
        16..19: TW3  # ingress::hdr.ethernet.dst_addr[47:16].16-47
        20..21: TH5  # ingress::hdr.ethernet.dst_addr[15:0].0-15
        22..23: TH2  # ingress::hdr.ethernet.src_addr[47:32].32-47
        24..25: TH1  # ingress::hdr.ethernet.src_addr[31:16].16-31
        26..27: TH0  # ingress::hdr.ethernet.src_addr[15:0].0-15
        B2: 1  # value 1 -> B2 bit[0]: ingress::hdr.ethernet.$valid
        load: { half : 28..29 }
        shift: 28
        buf_req: 30
        next: TofinoIngressParser_parse_port_metadata.$split_0
    TofinoIngressParser_parse_port_metadata.$split_0:
      match: [ half ]
      0x0800:
        0..1: H2  # ingress::hdr.ethernet.ether_type
        shift: 2
        buf_req: 2
        next: EthIpParser_parse_ip
      0x6666:
        0..1: H2  # ingress::hdr.ethernet.ether_type
        load: { byte1 : 2 }
        shift: 2
        buf_req: 3
        next: EthIpParser_parse_dpt
      0x****:
        0..1: H2  # ingress::hdr.ethernet.ether_type
        shift: 2
        buf_req: 2
        next: end
    EthIpParser_parse_ip:
      *:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ip.version
            # - bit[4..7] -> TW0 bit[27..24]: ingress::hdr.ip.ihl
            # - bit[8..15] -> TW0 bit[23..16]: ingress::hdr.ip.diffserv
            # - bit[16..31] -> TW0 bit[15..0]: ingress::hdr.ip.total_len
        4..7: TW1
            # - bit[32..47] -> TW1 bit[31..16]: ingress::hdr.ip.identification
            # - bit[48..50] -> TW1 bit[15..13]: ingress::hdr.ip.flags
            # - bit[51..63] -> TW1 bit[12..0]: ingress::hdr.ip.frag_offset
        8..11: TW2
            # - bit[64..71] -> TW2 bit[31..24]: ingress::hdr.ip.ttl
            # - bit[72..79] -> TW2 bit[23..16]: ingress::hdr.ip.protocol
            # - bit[80..95] -> TW2 bit[15..0]: ingress::hdr.ip.hdr_checksum
        12..15: W1  # ingress::hdr.ip.src_addr
        16..17: TH4  # ingress::hdr.ip.dst_addr[31:16].16-31
        18..19: TH3  # ingress::hdr.ip.dst_addr[15:0].0-15
        B2: 8  # value 1 -> B2 bit[3]: ingress::hdr.ip.$valid
        shift: 20
        buf_req: 20
        next: end
    EthIpParser_parse_dpt:
      match: [ byte1 ]
      0x02:
        0: TB0  # ingress::hdr.dpt_extra_processing_in.dpt_87_eventType
        0: B3  # ingress::md.dptMeta.eventType
        1..4: W0  # ingress::hdr.dpt_extra_processing_in.dpt_39_ip
        B2: 2  # value 1 -> B2 bit[1]: ingress::hdr.dpt_extra_processing_in.$valid
        shift: 5
        buf_req: 5
        next: EthIpParser_parse_ip
      0x**:
        0..3: TW0
            # - bit[0..3] -> TW0 bit[31..28]: ingress::hdr.ip.version
            # - bit[4..7] -> TW0 bit[27..24]: ingress::hdr.ip.ihl
            # - bit[8..15] -> TW0 bit[23..16]: ingress::hdr.ip.diffserv
            # - bit[16..31] -> TW0 bit[15..0]: ingress::hdr.ip.total_len
        4..7: TW1
            # - bit[32..47] -> TW1 bit[31..16]: ingress::hdr.ip.identification
            # - bit[48..50] -> TW1 bit[15..13]: ingress::hdr.ip.flags
            # - bit[51..63] -> TW1 bit[12..0]: ingress::hdr.ip.frag_offset
        8..11: TW2
            # - bit[64..71] -> TW2 bit[31..24]: ingress::hdr.ip.ttl
            # - bit[72..79] -> TW2 bit[23..16]: ingress::hdr.ip.protocol
            # - bit[80..95] -> TW2 bit[15..0]: ingress::hdr.ip.hdr_checksum
        12..15: W1  # ingress::hdr.ip.src_addr
        16..17: TH4  # ingress::hdr.ip.dst_addr[31:16].16-31
        18..19: TH3  # ingress::hdr.ip.dst_addr[15:0].0-15
        B2: 8  # value 1 -> B2 bit[3]: ingress::hdr.ip.$valid
        shift: 20
        buf_req: 20
        next: end
deparser ingress:
  dictionary:
    TW3: B2(0)  # ingress::hdr.ethernet.dst_addr.16-47 if ingress::hdr.ethernet.$valid
    TH5: B2(0)  # ingress::hdr.ethernet.dst_addr.0-15 if ingress::hdr.ethernet.$valid
    TH2: B2(0)  # ingress::hdr.ethernet.src_addr.32-47 if ingress::hdr.ethernet.$valid
    TH1: B2(0)  # ingress::hdr.ethernet.src_addr.16-31 if ingress::hdr.ethernet.$valid
    TH0: B2(0)  # ingress::hdr.ethernet.src_addr.0-15 if ingress::hdr.ethernet.$valid
    H2: B2(0)  # ingress::hdr.ethernet.ether_type if ingress::hdr.ethernet.$valid
    TB0: B2(1)  # ingress::hdr.dpt_extra_processing_in.dpt_87_eventType if ingress::hdr.dpt_extra_processing_in.$valid
    W0: B2(1)  # ingress::hdr.dpt_extra_processing_in.dpt_39_ip if ingress::hdr.dpt_extra_processing_in.$valid
    B1: B2(2)  # ingress::hdr.dpt_extra_processing_out.dpt_82_eventType if ingress::hdr.dpt_extra_processing_out.$valid
    W3: B2(2)  # ingress::hdr.dpt_extra_processing_out.dpt_74_ip if ingress::hdr.dpt_extra_processing_out.$valid
    TW0: B2(3)
        # - bit[31..28]: ingress::hdr.ip.version if ingress::hdr.ip.$valid
        # - bit[27..24]: ingress::hdr.ip.ihl if ingress::hdr.ip.$valid
        # - bit[23..16]: ingress::hdr.ip.diffserv if ingress::hdr.ip.$valid
        # - bit[15..0]: ingress::hdr.ip.total_len if ingress::hdr.ip.$valid
    TW1: B2(3)
        # - bit[31..16]: ingress::hdr.ip.identification if ingress::hdr.ip.$valid
        # - bit[15..13]: ingress::hdr.ip.flags if ingress::hdr.ip.$valid
        # - bit[12..0]: ingress::hdr.ip.frag_offset if ingress::hdr.ip.$valid
    TW2: B2(3)
        # - bit[31..24]: ingress::hdr.ip.ttl if ingress::hdr.ip.$valid
        # - bit[23..16]: ingress::hdr.ip.protocol if ingress::hdr.ip.$valid
        # - bit[15..0]: ingress::hdr.ip.hdr_checksum if ingress::hdr.ip.$valid
    W1: B2(3)  # ingress::hdr.ip.src_addr if ingress::hdr.ip.$valid
    TH4: B2(3)  # ingress::hdr.ip.dst_addr.16-31 if ingress::hdr.ip.$valid
    TH3: B2(3)  # ingress::hdr.ip.dst_addr.0-15 if ingress::hdr.ip.$valid
  egress_unicast_port: H0(0..8)  # bit[8..0]: ingress::ig_intr_md_for_tm.ucast_egress_port
  drop_ctl: B0(0..2)  # bit[2..0]: ingress::ig_intr_md_for_dprsr.drop_ctl
  egress_multicast_group_0:
    - H1  # ingress::ig_intr_md_for_tm.mcast_grp_a
parser egress:
  start: $entry_point
  init_zero: [ B16 ]
  bitwise_or: [ B16 ]
  hdr_len_adj: 27
  meta_opt: 8191
  states:
    $entry_point:
      *:
        0..1: H16  # bit[7..15] -> H16 bit[8..0]: egress::eg_intr_md.egress_port
        27..30: TW7  # egress::hdr.ethernet.dst_addr[47:16].16-47
        B16: 1  # value 1 -> B16 bit[0]: egress::hdr.ethernet.$valid
        shift: 31
        buf_req: 31
        next: start.$split_0
    start.$split_0:
      *:
        0..1: TH12  # egress::hdr.ethernet.dst_addr[15:0].0-15
        2..3: TH8  # egress::hdr.ethernet.src_addr[47:32].32-47
        4..5: TH7  # egress::hdr.ethernet.src_addr[31:16].16-31
        6..7: TH6  # egress::hdr.ethernet.src_addr[15:0].0-15
        load: { half : 8..9 }
        shift: 8
        buf_req: 10
        next: start.$split_1
    start.$split_1:
      match: [ half ]
      0x0800:
        0..1: H17  # egress::hdr.ethernet.ether_type
        shift: 2
        buf_req: 2
        next: EthIpParser_parse_ip_0
      0x6666:
        0..1: H17  # egress::hdr.ethernet.ether_type
        load: { byte1 : 2 }
        shift: 2
        buf_req: 3
        next: EthIpParser_parse_dpt_1
      0x****:
        0..1: H17  # egress::hdr.ethernet.ether_type
        shift: 2
        buf_req: 2
        next: end
    EthIpParser_parse_ip_0:
      *:
        0..3: TW4
            # - bit[0..3] -> TW4 bit[31..28]: egress::hdr.ip.version
            # - bit[4..7] -> TW4 bit[27..24]: egress::hdr.ip.ihl
            # - bit[8..15] -> TW4 bit[23..16]: egress::hdr.ip.diffserv
            # - bit[16..31] -> TW4 bit[15..0]: egress::hdr.ip.total_len
        4..7: TW5
            # - bit[32..47] -> TW5 bit[31..16]: egress::hdr.ip.identification
            # - bit[48..50] -> TW5 bit[15..13]: egress::hdr.ip.flags
            # - bit[51..63] -> TW5 bit[12..0]: egress::hdr.ip.frag_offset
        8..11: TW6
            # - bit[64..71] -> TW6 bit[31..24]: egress::hdr.ip.ttl
            # - bit[72..79] -> TW6 bit[23..16]: egress::hdr.ip.protocol
            # - bit[80..95] -> TW6 bit[15..0]: egress::hdr.ip.hdr_checksum
        12..13: TH10  # egress::hdr.ip.src_addr[31:16].16-31
        14..15: TH9  # egress::hdr.ip.src_addr[15:0].0-15
        16..17: TH11  # egress::hdr.ip.dst_addr[31:16].16-31
        18: TB7  # egress::hdr.ip.dst_addr[15:8].8-15
        19: TB6  # egress::hdr.ip.dst_addr[7:0].0-7
        B16: 2  # value 1 -> B16 bit[1]: egress::hdr.ip.$valid
        shift: 20
        buf_req: 20
        next: end
    EthIpParser_parse_dpt_1:
      match: [ byte1 ]
      0x02:
        0: TB4  # egress::hdr.dpt_extra_processing_in.dpt_87_eventType
        1..4: TW8  # egress::hdr.dpt_extra_processing_in.dpt_39_ip
        B16: 4  # value 1 -> B16 bit[2]: egress::hdr.dpt_extra_processing_in.$valid
        shift: 5
        buf_req: 5
        next: EthIpParser_parse_ip_0
      0x**:
        0..3: TW4
            # - bit[0..3] -> TW4 bit[31..28]: egress::hdr.ip.version
            # - bit[4..7] -> TW4 bit[27..24]: egress::hdr.ip.ihl
            # - bit[8..15] -> TW4 bit[23..16]: egress::hdr.ip.diffserv
            # - bit[16..31] -> TW4 bit[15..0]: egress::hdr.ip.total_len
        4..7: TW5
            # - bit[32..47] -> TW5 bit[31..16]: egress::hdr.ip.identification
            # - bit[48..50] -> TW5 bit[15..13]: egress::hdr.ip.flags
            # - bit[51..63] -> TW5 bit[12..0]: egress::hdr.ip.frag_offset
        8..11: TW6
            # - bit[64..71] -> TW6 bit[31..24]: egress::hdr.ip.ttl
            # - bit[72..79] -> TW6 bit[23..16]: egress::hdr.ip.protocol
            # - bit[80..95] -> TW6 bit[15..0]: egress::hdr.ip.hdr_checksum
        12..13: TH10  # egress::hdr.ip.src_addr[31:16].16-31
        14..15: TH9  # egress::hdr.ip.src_addr[15:0].0-15
        16..17: TH11  # egress::hdr.ip.dst_addr[31:16].16-31
        18: TB7  # egress::hdr.ip.dst_addr[15:8].8-15
        19: TB6  # egress::hdr.ip.dst_addr[7:0].0-7
        B16: 2  # value 1 -> B16 bit[1]: egress::hdr.ip.$valid
        shift: 20
        buf_req: 20
        next: end
deparser egress:
  dictionary:
    TW7: B16(0)  # egress::hdr.ethernet.dst_addr.16-47 if egress::hdr.ethernet.$valid
    TH12: B16(0)  # egress::hdr.ethernet.dst_addr.0-15 if egress::hdr.ethernet.$valid
    TH8: B16(0)  # egress::hdr.ethernet.src_addr.32-47 if egress::hdr.ethernet.$valid
    TH7: B16(0)  # egress::hdr.ethernet.src_addr.16-31 if egress::hdr.ethernet.$valid
    TH6: B16(0)  # egress::hdr.ethernet.src_addr.0-15 if egress::hdr.ethernet.$valid
    H17: B16(0)  # egress::hdr.ethernet.ether_type if egress::hdr.ethernet.$valid
    TB4: B16(2)  # egress::hdr.dpt_extra_processing_in.dpt_87_eventType if egress::hdr.dpt_extra_processing_in.$valid
    TW8: B16(2)  # egress::hdr.dpt_extra_processing_in.dpt_39_ip if egress::hdr.dpt_extra_processing_in.$valid
    TB5: B16(3)  # egress::hdr.dpt_extra_processing_out.dpt_82_eventType if egress::hdr.dpt_extra_processing_out.$valid
    TW9: B16(3)  # egress::hdr.dpt_extra_processing_out.dpt_74_ip if egress::hdr.dpt_extra_processing_out.$valid
    TW4: B16(1)
        # - bit[31..28]: egress::hdr.ip.version if egress::hdr.ip.$valid
        # - bit[27..24]: egress::hdr.ip.ihl if egress::hdr.ip.$valid
        # - bit[23..16]: egress::hdr.ip.diffserv if egress::hdr.ip.$valid
        # - bit[15..0]: egress::hdr.ip.total_len if egress::hdr.ip.$valid
    TW5: B16(1)
        # - bit[31..16]: egress::hdr.ip.identification if egress::hdr.ip.$valid
        # - bit[15..13]: egress::hdr.ip.flags if egress::hdr.ip.$valid
        # - bit[12..0]: egress::hdr.ip.frag_offset if egress::hdr.ip.$valid
    TW6: B16(1)
        # - bit[31..24]: egress::hdr.ip.ttl if egress::hdr.ip.$valid
        # - bit[23..16]: egress::hdr.ip.protocol if egress::hdr.ip.$valid
        # - bit[15..0]: egress::hdr.ip.hdr_checksum if egress::hdr.ip.$valid
    TH10: B16(1)  # egress::hdr.ip.src_addr.16-31 if egress::hdr.ip.$valid
    TH9: B16(1)  # egress::hdr.ip.src_addr.0-15 if egress::hdr.ip.$valid
    TH11: B16(1)  # egress::hdr.ip.dst_addr.16-31 if egress::hdr.ip.$valid
    TB7: B16(1)  # egress::hdr.ip.dst_addr.8-15 if egress::hdr.ip.$valid
    TB6: B16(1)  # egress::hdr.ip.dst_addr.0-7 if egress::hdr.ip.$valid
  egress_unicast_port: H16(0..8)  # bit[8..0]: egress::eg_intr_md.egress_port
stage 0 ingress:
  dependency: match
  phase0_match IngressParser.$PORT_METADATA:
    p4:
      name: IngressParser.$PORT_METADATA
      size: 288
      preferred_match_type: exact
      match_type: exact
    size: 288
    p4_param_order:
      ig_intr_md.ingress_port: { type: exact, size: 9 }
    format: {ig_intr_md: 0..63}
    constant_value: 0
    actions:
      set_port_metadata:
      - handle: 0x20000000
      - p4_param_order: { ig_intr_md: 64 } 
  ternary_match tbl_dispatch_setup 0:
    p4: { name: tbl_dispatch_setup }
    gateway:
      name: cond-4
      input_xbar:
        exact group 0: { 0: md.dptMeta.eventType }
      row: 0
      bus: 0
      unit: 0
      match: { 0: md.dptMeta.eventType }
      0x00: run_table
      miss:  dpt_1_merged_tbl_0
      condition: 
        expression: "(md.dptMeta.eventType == 0)"
        true:  tbl_dispatch_setup
        false:  dpt_1_merged_tbl_0
    hit: [  dpt_1_merged_tbl_0 ]
    miss:  dpt_1_merged_tbl_0
    indirect: tbl_dispatch_setup$tind
  ternary_indirect tbl_dispatch_setup$tind:
    row: 0
    bus: 0
    format: { action: 0..0 }
    instruction: tbl_dispatch_setup$tind(action, $DEFAULT)
    actions:
      Ingress.dispatch_setup(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000001
      - next_table: 0
      - set md.dptMeta.eventType, 1
    default_action: Ingress.dispatch_setup
stage 1 ingress:
  dependency: match
  ternary_match dpt_1_merged_tbl_0 0:
    p4: { name: Ingress.dpt_1_merged_tbl }
    p4_param_order: 
      md.dptMeta.eventType: { type: ternary, size: 8, full_size: 8 }
    row: 0
    bus: 0
    column: 0
    input_xbar:
      ternary group 0: { 0: md.dptMeta.eventType }
    match:
    - { group: 0, byte_config: 3, dirtcam: 0x1 }
    hit: [  dptContinueHandler_0 ]
    miss:  dptContinueHandler_0
    context_json:
      static_entries:
      - priority: 0
        match_key_fields_values:
        - field_name: md.dptMeta.eventType
          value: "0x1"
          mask: "0xff"
        action_handle: 0x20000002
        is_default_entry: false
        action_parameters_values: []
      - priority: 1
        match_key_fields_values:
        - field_name: md.dptMeta.eventType
          value: "0x2"
          mask: "0xff"
        action_handle: 0x20000003
        is_default_entry: false
        action_parameters_values: []
    indirect: dpt_1_merged_tbl_0$tind
  ternary_indirect dpt_1_merged_tbl_0$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: md.dptMeta.eventType }
    format: { action: 0..1 }
    instruction: dpt_1_merged_tbl_0$tind(action, $DEFAULT)
    actions:
      Ingress.dpt_88_merged_acn_1_acn_90_generate_0_extra_processing(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000002
      - next_table: 0
      - set hdr.dpt_extra_processing_out.$valid, 1
      - set md.dptMeta.nextEventType, 2
      - set hdr.dpt_extra_processing_out.dpt_82_eventType, 2
      - set hdr.dpt_extra_processing_out.dpt_74_ip, 0
      Ingress.dpt_92_merged_acn_1_acn_94_generate_0_continue(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: false, reason: has_const_default_action }
      - handle: 0x20000003
      - next_table: 0
      - set md.dptMeta.exitEventType, 3
      - set md.dpt_continue.ip, hdr.dpt_extra_processing_in.dpt_39_ip
      Ingress.dpt_113_noop(2, 0):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x20000004
      - next_table: 0
    default_action: Ingress.dpt_113_noop
stage 2 ingress:
  dependency: match
  ternary_match dptContinueHandler_0 0:
    p4: { name: Ingress.dptContinueHandler }
    p4_param_order: 
      md.dptMeta.exitEventType: { type: ternary, size: 8, full_size: 8 }
      md.dptMeta.nextEventType: { type: ternary, size: 8, full_size: 8 }
    row: 0
    bus: 0
    column: 0
    input_xbar:
      ternary group 0: { 0: md.dptMeta.nextEventType, 8: md.dptMeta.exitEventType }
    match:
    - { group: 0, byte_config: 3, dirtcam: 0x5 }
    hit: [  tbl_handle_dispatch_result,  tbl_handle_dispatch_result,  END,  END ]
    miss:  tbl_handle_dispatch_result
    context_json:
      static_entries:
      - priority: 0
        match_key_fields_values:
        - field_name: md.dptMeta.exitEventType
          value: "0x0"
          mask: "0xff"
        - field_name: md.dptMeta.nextEventType
          value: "0x0"
          mask: "0xff"
        action_handle: 0x20000006
        is_default_entry: false
        action_parameters_values: []
      - priority: 1
        match_key_fields_values:
        - field_name: md.dptMeta.exitEventType
          value: "0x0"
          mask: "0x0"
        - field_name: md.dptMeta.nextEventType
          value: "0x0"
          mask: "0xff"
        action_handle: 0x20000008
        is_default_entry: false
        action_parameters_values: []
      - priority: 2
        match_key_fields_values:
        - field_name: md.dptMeta.exitEventType
          value: "0x0"
          mask: "0xff"
        - field_name: md.dptMeta.nextEventType
          value: "0x0"
          mask: "0x0"
        action_handle: 0x20000005
        is_default_entry: false
        action_parameters_values: []
      - priority: 3
        match_key_fields_values:
        - field_name: md.dptMeta.exitEventType
          value: "0x0"
          mask: "0x0"
        - field_name: md.dptMeta.nextEventType
          value: "0x0"
          mask: "0x0"
        action_handle: 0x20000007
        is_default_entry: false
        action_parameters_values: []
    indirect: dptContinueHandler_0$tind
  ternary_indirect dptContinueHandler_0$tind:
    row: 0
    bus: 0
    column: 2
    input_xbar:
      ternary group 0: { 0: md.dptMeta.nextEventType, 8: md.dptMeta.exitEventType }
    format: { action: 0..1 }
    instruction: dptContinueHandler_0$tind(action, $DEFAULT)
    actions:
      Ingress.continueAndGenerate(0, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000007
      - next_table: 0
      - set hdr.dpt_extra_processing_in.$valid, 0
      - set ig_intr_md_for_tm.mcast_grp_a, 1066
      - set hdr.ethernet.ether_type, 26214
      Ingress.continueOnly(1, 2):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000008
      - next_table: 1
      - set hdr.dpt_extra_processing_in.$valid, 0
      Ingress.generateOnly(2, 4):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000005
      - next_table: 2
      - set hdr.dpt_extra_processing_in.$valid, 0
      - set hdr.ethernet.ether_type, 26214
      - set ig_intr_md_for_tm.mcast_grp_a, 1066
      Ingress.noEventsOut(3, 6):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true }
      - handle: 0x20000006
      - next_table: 3
      - set hdr.dpt_extra_processing_in.$valid, 0
      - set ig_intr_md_for_dprsr.drop_ctl, 1
      NoAction(-1, 0):
      - hit_allowed: { allowed: false, reason: user_indicated_default_only }
      - default_only_action: { allowed: true }
      - handle: 0x20000009
      - next_table_miss:  tbl_handle_dispatch_result
    default_only_action: NoAction
  ternary_match tbl_handle_dispatch_result 1:
    p4: { name: tbl_handle_dispatch_result }
    gateway:
      name: cond-5
      input_xbar:
        exact group 0: { 0: md.dptMeta.exitEventType }
      row: 0
      bus: 0
      unit: 0
      match: { 0: md.dptMeta.exitEventType }
      0x00:  END
      miss: run_table
      condition: 
        expression: "(md.dptMeta.exitEventType != 0)"
        true:  tbl_handle_dispatch_result
        false:  END
    hit: [  END ]
    miss:  END
    indirect: tbl_handle_dispatch_result$tind
  ternary_indirect tbl_handle_dispatch_result$tind:
    row: 0
    bus: 1
    format: { action: 0..0 }
    instruction: tbl_handle_dispatch_result$tind(action, $DEFAULT)
    actions:
      Ingress.handle_dispatch_result(1, 3):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000000a
      - next_table: 0
      - set hdr.ip.src_addr, md.dpt_continue.ip
      - set ig_intr_md_for_tm.ucast_egress_port, 0
    default_action: Ingress.handle_dispatch_result
stage 0 egress:
  dependency: match
  ternary_match tbl_DPT_harness382 1:
    p4: { name: tbl_DPT_harness382 }
    gateway:
      name: cond-6
      input_xbar:
        exact group 0: { 8: eg_intr_md.egress_port(8), 16: eg_intr_md.egress_port(0..7) }
      row: 0
      bus: 1
      unit: 1
      match: { 0: eg_intr_md.egress_port(0..7), 8: eg_intr_md.egress_port(8) }
      0b*******011000100:  END
      miss: run_table
      condition: 
        expression: "(eg_intr_md.egress_port == 196)"
        true:  END
        false:  tbl_DPT_harness382
    hit: [  END ]
    miss:  END
    indirect: tbl_DPT_harness382$tind
  ternary_indirect tbl_DPT_harness382$tind:
    row: 0
    bus: 1
    format: { action: 0..0 }
    instruction: tbl_DPT_harness382$tind(action, $DEFAULT)
    actions:
      DPT_harness382(1, 1):
      - hit_allowed: { allowed: true }
      - default_action: { allowed: true, is_constant: true }
      - handle: 0x2000000b
      - next_table: 0
      - set hdr.ethernet.ether_type, 2048
      - set B16(2..3), 0
    default_action: DPT_harness382

flexible_headers: [

  { name: "hdr.dpt_extra_processing_in",
    fields: [

      { name: "dpt_87_eventType", slice: { start_bit: 0, bit_width: 8 } },
      { name: "dpt_39_ip", slice: { start_bit: 0, bit_width: 32 } }    ]
  },
  { name: "hdr.dpt_extra_processing_out",
    fields: [

      { name: "dpt_82_eventType", slice: { start_bit: 0, bit_width: 8 } },
      { name: "dpt_74_ip", slice: { start_bit: 0, bit_width: 32 } }    ]
  }]

primitives: "/media/psf/Home/Desktop/gits/dpt/examples/p4/hello_world/build/hello_world.p4tapp/build//pipe//DPT_harness.prim.json"
dynhash: "/media/psf/Home/Desktop/gits/dpt/examples/p4/hello_world/build/hello_world.p4tapp/build//pipe//DPT_harness.dynhash.json"
