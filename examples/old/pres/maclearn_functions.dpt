/* mac learner implemented with functions. */

/* table: dst mac --> port */
Array dst_1 = Array.create<32>(1024);
Array dst_2 = Array.create<32>(1024);
Array egr_1  = Array.create<32>(1024);
Array egr_2  = Array.create<32>(1024);

/* table: src mac --> last seen */
Array src_1 = Array.create<32>(1024);
Array src_2 = Array.create<32>(1024);
Array ts_1  = Array.create<32>(1024);
Array ts_2  = Array.create<32>(1024);

function get_outport<int>(int mac) {
	int out_port = 129; /* broadcast */
	int h1 = Sys.hash<32>(10398247, mac); 
	int h2 = Sys.hash<32>(1295981879, mac);

	int found_1 = Array.get<32>(dst_1, h1);
	if (found_1 == 1) {
		out_port = Array.get<32>(egr_1, h1);
	}
	else {
		int found_2 = Array.get<32>(dst_2, h2);
		if (found_2 == 1){
			out_port = Array.get<32>(egr_2, h2);
		}
	}
	return out_port;
}

function update_lastseen<int>(int mac, int port) {
	int ts = Sys.time(1);
	int ts_tmp = ts; /* merge var pass bug */

	int h1 = Sys.hash<32>(10398247, mac); 
	int h2 = Sys.hash<32>(1295981879, mac);
	int found_1 = Array.get<32>(src_1, h1); /* cmp */
	if (found_1 == 1) {
		int junk_1 = Array.set<32>(ts_1, h1, ts);
	}
	else {
		int found_2 = Array.get<32>(src_2, h2); /* cmp */
		if (found_2 == 1) {
			int junk_2 = Array.set<32>(ts_2, h2, ts_tmp);
		}		
		else {
			/* source mac not found -- install entry. */
			generate install(src, sport, ts, src, 0);
		}
	}
}

handle pktin (int sport, int src, int dport, int dst) {

	/* lookup out port. */
	int out_port = get_outport(dst);	
	generate pktout (out_port);			

	/* check if src is in table, update last seen time*/


}

handle install (int mac, int port, int ts, int orig_mac, int retry_ct) {
	int ts_tmp = ts; /* bug in merge pass if we use a parameter (ts)... */
	/* update first stage of mac tables. */	
	int h1 = Sys.hash<32>(10398247, mac); 
	/* dst tbl */
	int victim_1 = Array.getAndset<32>(dst_1, h1, mac);
	int victim_1_port = Array.getAndset<32>(egr_1, h1, port);
	/* src tbl */
	int junk_1   = Array.set<32>(src_1, h1, mac); /* entry here is the same as victim_1 */
	int victim_1_ts = Array.getAndset<32>(ts_1, h1, ts_tmp);

	int is_victim_1 = mac - victim_1;
	/* update second stage of mac tables. */
	int h2 = Sys.hash<32>(1295981879, victim_1);
	if (victim_1 == 0 && is_victim_1 == 0) { /* != */
		/* dst tbl */
		int victim_2 = Array.getAndset<32>(dst_2, h2, victim_1);
		int victim_2_port = Array.getAndset<32>(egr_2, h2, victim_1_port);
		/* src tbl */
		int junk_2   = Array.set<32>(src_2, h2, mac);
		int victim_2_ts = Array.getAndset<32>(ts_2, h2, victim_1_ts);

		int is_victim_2 = victim_1 - victim_2;
		/* re-insert victim_2 */
		if (victim_2 == 0 && is_victim_2 == 0) { /* != */
			/* Check for a cycle. If there's a cycle, the table is full and we can quit. */
			int mac_is_orig = mac - orig_mac;
			if (mac_is_orig == 0) {
				retry_ct = retry_ct + 1;
			}
			if (retry_ct == 2) {
				generate fail (mac);
			}
			else {
				generate install (victim_2, victim_2_port, victim_2_ts, orig_mac, retry_ct);
			}
		}			
	}
}


handle packetin (int src, int dst) {
	int placeholder = 1;	
}

handle pktout (int dport){
	int placeholder = 1;	
}

/* report the MAC installation failure to a controller. */
handle fail (int mac) {
	int placeholder = 1;
}