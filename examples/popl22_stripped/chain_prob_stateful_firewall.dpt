include "BloomFilter.dpt"
const int NUM_REGISTERS = 16;
const int[4] HASH_SEEDS = [22 ; 33 ; 44 ; 55];

const int head = 0;
const int tail = 0;
const int succ = 0;

const int self = 0;

global BloomFilter.t<<4, 4>> filter = BloomFilter.create(NUM_REGISTERS, HASH_SEEDS);

entry event request_packet (int client_ip, int server_ip);
entry event response_packet (int server_ip, int client_ip);
exit event request_continue (int src_ip, int dst_ip);
exit event response_continue (int src_ip, int dst_ip);

event add_to_firewall(int[2] args) {
  BloomFilter.add_to_filter(filter, args);
  if (self != tail) {
        generate Event.sslocate(add_to_firewall(args), succ);
  }
}

handle request_packet(int client_ip, int server_ip) {
  bool in_filter = BloomFilter.in_filter(filter, [client_ip; server_ip]);
  if (in_filter == false) {
        generate Event.sslocate(add_to_firewall([client_ip; server_ip]), head);
  }
  generate request_continue(client_ip, server_ip);
}

handle response_packet(int server_ip, int client_ip) {
  bool in_filter = BloomFilter.in_filter(filter, [client_ip; server_ip]);
  if (in_filter) {
    generate request_continue(client_ip, client_ip);
  }
}
