---LinkP4.ml log---
[pragma_replace_trans] -------------- block: DPT_OBJECTS--------------
[pragma_replace_trans] code:
 
    bit<32> x_114;
    
    bit<32> y_115;
    
    
    
    action dpt_363_alu_0_opstmt( ){
        x_114 = md.pktin.src_ip >> 10;
        
    }
    
    action dpt_1_merged_acn( ){
        //next tables: []
        
    }
    
    action dpt_363_merged_acn_1_acn_0_opstmt( ){
        dpt_363_alu_0_opstmt();
        //next tables: [dpt_364_tbl_0_opstmt]
        
    }
    
    @pragma stage 0
    table dpt_1_merged_tbl {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_363_merged_acn_1_acn_0_opstmt;
            dpt_1_merged_acn;
        }
        const entries = {
            0 : dpt_363_merged_acn_1_acn_0_opstmt();
            _ : dpt_1_merged_acn();
        }
        
    }
    
    action dpt_364_alu_0_opstmt( ){
        y_115 = x_114 << 10;
        
    }
    
    action dpt_2_merged_acn( ){
        //next tables: []
        
    }
    
    action dpt_364_merged_acn_2_acn_0_opstmt( ){
        dpt_364_alu_0_opstmt();
        //next tables: []
        
    }
    
    @pragma stage 1
    table dpt_2_merged_tbl {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_364_merged_acn_2_acn_0_opstmt;
            dpt_2_merged_acn;
        }
        const entries = {
            0 : dpt_364_merged_acn_2_acn_0_opstmt();
            _ : dpt_2_merged_acn();
        }
        
    }
     
    action acn_stop() {
	exit;
	ig_dprsr_md.drop_ctl = 0x1;
	}
action acn_return() {
	hdr.ethernet.ether_type = 0x800;
	}
table dpt_0_lucid_return_table {
	key = {md.dptMeta.exitEventType : ternary; md.dptMeta.nextEventType : ternary;}
	actions = {acn_stop; acn_return;}
	const entries = {(0x0, 0x0) : acn_stop(); (0x0, 0x0) : acn_return();}
}
    
[pragma_replace_trans] -------------- block: DPT_DISPATCH--------------
[pragma_replace_trans] code:
 
    dpt_1_merged_tbl.apply();
    dpt_2_merged_tbl.apply(); 
    dpt_0_lucid_return_table.apply();
[pragma_replace_trans] -------------- block: DPT_HEADERS--------------
[pragma_replace_trans] code:
    const bit<8> e_pktin=0;
    struct pktin_t {
        bit<8> eventType;
        bit<8> eventMc;
        bit<32> eventLoc;
        bit<32> eventDelay;
        bit<32> src_ip;
        bit<32> dst_ip;
    }
    struct dptMeta_t {
        bit<32> timestamp;
        bit<8> eventType;
        bit<8> exitEventType;
        bit<8> nextEventType;
    }
[pragma_replace_trans] -------------- block: DPT_HEADER_INSTANCES--------------
[pragma_replace_trans] code:
    
[pragma_replace_trans] -------------- block: DPT_METADATA_INSTANCES--------------
[pragma_replace_trans] code:
    pktin_t pktin;
    dptMeta_t dptMeta;
[pragma_replace_trans] -------------- block: DPT_PARSER--------------
[pragma_replace_trans] code:
parser DptIngressParser (packet_in pkt, out header_t hdr, out metadata_t md) {
    state start {
        md.dptMeta.eventType = pkt.lookahead<bit<8>>();
        transition select(md.dptMeta.eventType) {
            
        }
    }
}
[pragma_replace_trans] -------------- block: DPT_EGRESS_OBJECTS--------------
[pragma_replace_trans] code:
 
    
        action egr_disable_events() {
	hdr.ethernet.ether_type = 0x800;
	}
        action egr_noop() { }
        table dpt_0_egr_serialize_clone {
          key = {hdr.ethernet.ether_type : ternary; eg_intr_md.egress_rid : ternary;}
          actions = {egr_disable_events; egr_noop;}
          const entries = {
            (0x1066, 0) : egr_disable_events();
            (0x1066, _) : egr_noop();
            (_, _)      : egr_noop();  
          }
        }
        
    
[pragma_replace_trans] -------------- block: DPT_EGRESS--------------
[pragma_replace_trans] code:
 
    dpt_0_egr_serialize_clone.apply();
