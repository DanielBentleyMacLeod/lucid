
entry event pktin(int src_ip, int dst_ip);

/* 
  This example changes a variable tested in a condition. 
  Without SSA, the control flow may break, because 
  you need to test the original value of a, not the new one. 
*/

handle pktin(int src_ip, int dst_ip) {
  int a = 1; 
  if (src_ip == 1 || a == 1) {
    a = 2;
    int b = a + 1;
  }
}

/* 
with static if variables, this compiles to: 

stage 0: 
            a_46 = 1;
            b_47 = 1;

stage 1:
            a_52 = a_46;

stage 2:
(a_52 == 1)  a_46 = 2;

stage 3: 
(a_52 == 1)  b_47 = a_46 + 1;

This is correct. 


without partial SA, this compiles to: 

stage 0: 
  if (true) {b_47 = 1;}
  if (true) {a_46 = 1;}
stage 1:
  if (a_46 == 1) {a_46 = 2;}
stage 2:
  if (a_46 == 1) {b_47 = a_46 + 1;}

This should evaluate to: 
a_46 = 2;
b_47 = 3;

But actually, it would evaluate to: 
a_46 = 2;
b_47 = 3;


The problem happens when you change a variable used in a condition.... 

  int a = 1; 
  int b = 1;
  if (a == 1) {
    a = 2;
    b = a + 1;
  }
}

--> 

  int a = 1; 
  int b = 1;
  a_1 = a;
  if (a_1 == 1) {
    a = 2;
    b = a + 1;
  }
}

algorithm: 
  - for every variable x used in an if or match statement: 
    - immediately before the statement, add a new statement: 
      - int x_n = x;
    - replace x with x_n in the match statement 
  
*/


